;╔═════════════════════════════════════════════════════════════════════════════════════════════════
;║     setup.pbi                                                                           
;╠═════════════════════════════════════════════════════════════════════════════════════════════════
;║     Created: 09-08-2025 
;║
;║     Copyright (c) 2025 James Dooley <james@dooley.ch>
;║
;║     History:
;║     09-08-2025: Initial version
;╚═════════════════════════════════════════════════════════════════════════════════════════════════
DeclareModule SetupModule
  
  ; Holds details of a window's size and location
  Structure WindowLocation
    X.i
    Y.I
    Width.i
    Height.i
  EndStructure
  
  Declare.b GetWindowLocation(name$, *record.WindowLocation) ; Returns the location information for a given window
  Declare.b SetWindowLocation(name$, *record.WindowLocation) ; Stores the location information for a given window
  
  Declare.s SetupModuleError() ; Returns last error generated by the library

EndDeclareModule

Module SetupModule
  EnableExplicit
  
  UseModule Consts
  UseModule FileUtils
  
  Define lastError$ = ""
  
  Procedure.s GetConfigFileName()
    ProcedureReturn MakePath(GetApplicationDataFolder(), #APP_CFG_FILE$)
  EndProcedure
  
  ;┌───────────────────────────────────────────────────────────────────────────────────────────────
  ;│     Public     
  ;└───────────────────────────────────────────────────────────────────────────────────────────────

  ; Returns last error generated by the library
  Procedure.s SetupModuleError()
    Shared lastError$
    ProcedureReturn lastError$
  EndProcedure
  
  ; Returns the location information for a given window
  ;
  ; Params
  ; name$ - The name of the window to load
  ; *record - The address of the record to populate
  ;
  Procedure.b GetWindowLocation(name$, *record.WindowLocation) 
    Protected cfgFile$ = GetConfigFileName()
    
    With *record
      \X = #WND_MAIN_default_X
      \Y = #WND_MAIN_default_Y
      \Width = #WND_MAIN_min_width
      \Height = #WND_MAIN_min_height      
    EndWith
    
    If OpenPreferences(cfgFile$)
      If PreferenceGroup(name$)    
        With *record
          \X = ReadPreferenceLong("x", #WND_MAIN_default_X)
          \Y = ReadPreferenceLong("y", #WND_MAIN_default_Y)
          \Width = ReadPreferenceLong("width", #WND_MAIN_min_width)
          \Height = ReadPreferenceLong("height", #WND_MAIN_min_height)
        EndWith
      EndIf
    EndIf
    
    ClosePreferences()
    
    ProcedureReturn #True
  EndProcedure
  
  ; Stores the location information for a given window
  ;
  ; Params
  ; name$ - The name of the window to load
  ; *record - The address of the record to store
  ;
  Procedure.b SetWindowLocation(name$, *record.WindowLocation)
    Protected cfgFile$ = GetConfigFileName()
    
    OpenPreferences(cfgFile$)
      PreferenceGroup(name$)
      
      With *record
        WritePreferenceLong("x", \X)
        WritePreferenceLong("y", \Y)
        WritePreferenceLong("width", \Width)
        WritePreferenceLong("height", \Height)
      EndWith
      
    ClosePreferences()
      
    ProcedureReturn #True
  EndProcedure
EndModule
; IDE Options = PureBasic 6.21 - C Backend (MacOS X - arm64)
; ExecutableFormat = Console
; CursorPosition = 31
; FirstLine = 1
; Folding = --
; EnableXP
; DPIAware