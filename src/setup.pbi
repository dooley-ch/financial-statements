;╔═════════════════════════════════════════════════════════════════════════════════════════════════
;║     setup.pbi                                                                           
;╠═════════════════════════════════════════════════════════════════════════════════════════════════
;║     Created: 09-08-2025 
;║
;║     Copyright (c) 2025 James Dooley <james@dooley.ch>
;║
;║     History:
;║     09-08-2025: Initial version
;╚═════════════════════════════════════════════════════════════════════════════════════════════════
DeclareModule SetupModule
  
  ; Holds details of a window's size and location
  Structure WindowLocation
    X.i
    Y.I
    Width.i
    Height.i
  EndStructure
  
  ; Holds details of the database login 
  Structure DatabaseLoginRecord
    dbName.s
    dbHost.s
    dbPort.i
    dbUserId.s
    dbPassword.s
  EndStructure
  
  ; Holds details of the SimFin Account
  Structure SimFinLoginRecord
    simFinUrl.s
    simFinKey.s
    simFinMinCalls.i
  EndStructure
    
  Structure UserEditSettingsRecord
    dataFolder.s
    simFinUrl.s
    simFinKey.s
    simFinMinCalls.i
    dbName.s
    dbHost.s
    dbPort.i
    dbUserId.s
    dbPassword.s
  EndStructure
  
  Declare.b InitUserEditSettingsRecord(*record.UserEditSettingsRecord)  ; Initialize the strucutre
  
  Declare.b GetUserEditSettingsRecord(*record.UserEditSettingsRecord)   ; Gets the current settings for editing by the user
  Declare.b StoreUserEditSettingsRecord(*record.UserEditSettingsRecord) ; Stores the current settings for a user edit
  
  Declare.b StoreSimFinAccount(*record.SimFinLoginRecord)       ; Store the SimFin account details in the preferences file
  Declare.b GetSimFinAccount(*record.SimFinLoginRecord)         ; Get the SimFin account details from the preferences file
  
  Declare.b StoreDatabaseLogin(*record.DatabaseLoginRecord)     ; Store the database account details in the preferences file
  Declare.b GetDatabaseLogin(*record.DatabaseLoginRecord)       ; Get the database account details from the preferences file
  
  Declare.b StoreDataFolder(folderName$)    ; Stores the data base folder in the preferences file
  Declare.s GetDataFolder()                 ; Get the data base folder from the preferences file
  
  Declare.b GetWindowLocation(name$, *record.WindowLocation)    ; Returns the location information for a given window
  Declare.b StoreWindowLocation(name$, *record.WindowLocation)    ; Stores the location information for a given window
  
  Declare.s SetupModuleError() ; Returns last error generated by the library

EndDeclareModule

Module SetupModule
  EnableExplicit
  
  UseModule Consts
  UseModule FileUtils
  
  #SIM_FIN_SECTION = "simfin"
  #DATABASE_SECTION = "database"
  #FOLDERS_SECTION = "folders"
  
  #DEFAULT_SIM_FIN_URL = "http://localhost:8080/api/bulk-download/s3"
  #DEFAULT_DATABASE_HOST = "localhost"
  #DEFAULT_DATABASE_PORT = 5432
  
  Define lastError$ = ""
  
  Procedure.s GetConfigFileName()
    ProcedureReturn MakePath(GetApplicationDataFolder(), #APP_CFG_FILE$)
  EndProcedure
  
  Procedure CopyDatabaseEdit(*editRecord.UserEditSettingsRecord, *databaseRecord.DatabaseLoginRecord)
    With *databaseRecord
      \dbName = *editRecord\dbName
      \dbHost = *editRecord\dbHost
      \dbPort = *editRecord\dbPort
      \dbUserId = *editRecord\dbUserId
      \dbPassword = *editRecord\dbPassword
    EndWith
  EndProcedure
  
  Procedure CopySimFinEdit(*editRecord.UserEditSettingsRecord, *simFinRecord.SimFinLoginRecord)
    With *simFinRecord
      \simFinUrl = *editRecord\simFinUrl
      \simFinKey = *editRecord\simFinKey
      \simFinMinCalls = *editRecord\simFinMinCalls
    EndWith
  EndProcedure
  
  ;┌───────────────────────────────────────────────────────────────────────────────────────────────
  ;│     Public     
  ;└───────────────────────────────────────────────────────────────────────────────────────────────

  ; Returns last error generated by the library
  Procedure.s SetupModuleError()
    Shared lastError$
    ProcedureReturn lastError$
  EndProcedure
  
  ; Returns the location information for a given window
  ;
  ; Params
  ; name$ - The name of the window to load
  ; *record - The address of the record to populate
  ;
  Procedure.b GetWindowLocation(name$, *record.WindowLocation) 
    Protected cfgFile$ = GetConfigFileName()
    
    With *record
      \X = #WND_MAIN_default_X
      \Y = #WND_MAIN_default_Y
      \Width = #WND_MAIN_min_width
      \Height = #WND_MAIN_min_height      
    EndWith
    
    If OpenPreferences(cfgFile$, #PB_Preference_GroupSeparator, #PB_UTF8)
      If PreferenceGroup(name$)    
        With *record
          \X = ReadPreferenceLong("x", #WND_MAIN_default_X)
          \Y = ReadPreferenceLong("y", #WND_MAIN_default_Y)
          \Width = ReadPreferenceLong("width", #WND_MAIN_min_width)
          \Height = ReadPreferenceLong("height", #WND_MAIN_min_height)
        EndWith
      EndIf
    EndIf
    
    ClosePreferences()
    
    ProcedureReturn #True
  EndProcedure
  
  ; Stores the location information for a given window
  ;
  ; Params
  ; name$ - The name of the window to load
  ; *record - The address of the record to store
  ;
  Procedure.b StoreWindowLocation(name$, *record.WindowLocation)
    Protected cfgFile$ = GetConfigFileName()
    
    OpenPreferences(cfgFile$, #PB_Preference_GroupSeparator, #PB_UTF8)
      PreferenceGroup(name$)
      
      With *record
        WritePreferenceLong("x", \X)
        WritePreferenceLong("y", \Y)
        WritePreferenceLong("width", \Width)
        WritePreferenceLong("height", \Height)
      EndWith
      
    ClosePreferences()
      
    ProcedureReturn #True
  EndProcedure
  
  ; Initialize the strucutre
  ;
  ; Params
  ; *record - The record to initialise
  ;
  Procedure.b InitUserEditSettingsRecord(*record.UserEditSettingsRecord)
    With *record
      \dataFolder = #Empty$
      \simFinUrl = #DEFAULT_SIM_FIN_URL
      \simFinKey = #Empty$
      \simFinMinCalls = 60
      \dbName = #Empty$
      \dbHost = #DEFAULT_DATABASE_HOST
      \dbPort = #DEFAULT_DATABASE_PORT
      \dbUserId = #Empty$
      \dbPassword = #Empty$      
    EndWith
    
    ProcedureReturn #True
  EndProcedure
  
  ; Gets the current settings for editing by the user
  ;
  ; Params
  ; *record - The record to initialise
  ;
  Procedure.b GetUserEditSettingsRecord(*record.UserEditSettingsRecord) 
    Protected dbRecord.DatabaseLoginRecord, simFinRecord.SimFinLoginRecord, folderName$
    
    InitUserEditSettingsRecord(*record)
    
    GetDatabaseLogin(@dbRecord)
    GetSimFinAccount(@simFinRecord)
    folderName$ = GetDataFolder()
    
    With *record
      \dataFolder = folderName$
      
      \dbName = dbRecord\dbName
      \dbHost = dbRecord\dbHost
      \dbPort = dbRecord\dbPort
      \dbUserId = dbRecord\dbUserId
      \dbPassword = dbRecord\dbPassword
      
      \simFinUrl = simFinRecord\simFinUrl
      \simFinKey = simFinRecord\simFinKey
      \simFinMinCalls = simFinRecord\simFinMinCalls
    EndWith
    
    ProcedureReturn #True
  EndProcedure
  
  ; Stores the current settings for a user edit
  ;
  ; Params
  ; *record - Record containing all elements edited by the user
  ;
  Procedure.b StoreUserEditSettingsRecord(*record.UserEditSettingsRecord)
    Protected dbRecord.DatabaseLoginRecord, simFinRecord.SimFinLoginRecord
    
    CopyDatabaseEdit(*record, @dbRecord)
    CopySimFinEdit(*record, @simFinRecord)
    
    StoreSimFinAccount(@simFinRecord)
    StoreDatabaseLogin(@dbRecord)
    StoreDataFolder(*record\dataFolder)
    
    ProcedureReturn #True
  EndProcedure
  
  ; Store the SimFin account details in the preferences file
  ;
  ; Params
  ; *record - The data to store in the preferences file
  ;
  Procedure.b GetSimFinAccount(*record.SimFinLoginRecord)  
    Protected cfgFile$ = GetConfigFileName()
    
    OpenPreferences(cfgFile$, #PB_Preference_GroupSeparator, #PB_UTF8)
      PreferenceGroup(#SIM_FIN_SECTION)
      
      With *record
        \simFinUrl = ReadPreferenceString("url", #DEFAULT_SIM_FIN_URL)
        \simFinKey = ReadPreferenceString("key", #Empty$)
        \simFinMinCalls = ReadPreferenceInteger("max-calls", 0)
      EndWith
      
    ClosePreferences()
      
    ProcedureReturn #True    
  EndProcedure
  
  ; Store the SimFin account details in the preferences file
  ;
  ; Params
  ; *record - The data to store in the preferences file
  ;
  Procedure.b StoreSimFinAccount(*record.SimFinLoginRecord) 
    Protected cfgFile$ = GetConfigFileName()
    
    OpenPreferences(cfgFile$, #PB_Preference_GroupSeparator, #PB_UTF8)
      PreferenceGroup(#SIM_FIN_SECTION)
      
      With *record
        WritePreferenceString("url", \simFinUrl)
        WritePreferenceString("key", \simFinKey)
        WritePreferenceInteger("max-calls", \simFinMinCalls)
      EndWith
      
    ClosePreferences()
      
    ProcedureReturn #True
  EndProcedure
  
  ; Store the database account details in the preferences file
  ;
  ; Params
  ; *record - The data to store in the preferences file
  ;
  Procedure.b GetDatabaseLogin(*record.DatabaseLoginRecord)       
    Protected cfgFile$ = GetConfigFileName()
    
    OpenPreferences(cfgFile$, #PB_Preference_GroupSeparator, #PB_UTF8)
      PreferenceGroup(#DATABASE_SECTION)
      
      With *record
        \dbName = ReadPreferenceString("name", #Empty$)
        \dbHost = ReadPreferenceString("host", #DEFAULT_DATABASE_HOST)
        \dbPort = ReadPreferenceInteger("port", #DEFAULT_DATABASE_PORT)
        \dbUserId = ReadPreferenceString("user", #Empty$)
        \dbPassword = ReadPreferenceString("password", #Empty$)
      EndWith
      
    ClosePreferences()
      
    ProcedureReturn #True
  EndProcedure
  
  ; Store the database account details in the preferences file
  ;
  ; Params
  ; *record - The data to store in the preferences file
  ;
  Procedure.b StoreDatabaseLogin(*record.DatabaseLoginRecord)     
    Protected cfgFile$ = GetConfigFileName()
    
    OpenPreferences(cfgFile$, #PB_Preference_GroupSeparator, #PB_UTF8)
      PreferenceGroup(#DATABASE_SECTION)
      
      With *record
        WritePreferenceString("name", \dbName)
        WritePreferenceString("host", \dbHost)
        WritePreferenceInteger("port", \dbPort)
        WritePreferenceString("user", \dbUserId)
        WritePreferenceString("password", \dbPassword)
      EndWith
      
    ClosePreferences()
      
    ProcedureReturn #True
  EndProcedure
  
  ; Stores the data base folder in the preferences file
  ;
  ; Parameters
  ; folderName$ - The name of the folder to store
  ;
  Procedure.b StoreDataFolder(folderName$) 
    Protected cfgFile$ = GetConfigFileName()
    
    OpenPreferences(cfgFile$, #PB_Preference_GroupSeparator, #PB_UTF8)
      PreferenceGroup(#FOLDERS_SECTION)
      WritePreferenceString("data-base-folder", folderName$)
    ClosePreferences()
      
    ProcedureReturn #True    
  EndProcedure
  
  ; Get the data base folder from the preferences file
  ;
  ; Returns the data folder name
  Procedure.s GetDataFolder()   
    Protected cfgFile$ = GetConfigFileName(), folderName$
    
    OpenPreferences(cfgFile$, #PB_Preference_GroupSeparator, #PB_UTF8)
      PreferenceGroup(#FOLDERS_SECTION)
      folderName$ = ReadPreferenceString("data-base-folder", #Empty$)
    ClosePreferences()
      
    ProcedureReturn folderName$ 
  EndProcedure
EndModule
; IDE Options = PureBasic 6.21 - C Backend (MacOS X - arm64)
; ExecutableFormat = Console
; CursorPosition = 362
; FirstLine = 329
; Folding = ---
; EnableXP
; DPIAware