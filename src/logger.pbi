;╔═════════════════════════════════════════════════════════════════════════════════════════════════
;║     logger.pbi                                                                           
;╠═════════════════════════════════════════════════════════════════════════════════════════════════
;║     Created: 22-06-2025 
;║
;║     Copyright (c) 2025 James Dooley <james@dooley.ch>
;║
;║     History:
;║     29-06-2025: Initial version
;║
;║     Usage:
;║     1. Call the function SetLoggingFileName to set the log file name on start up
;║     2. Check the return value of at least the first call to the module to ensure it is
;║        functioning correctly
;║     3. When compiling the 'Create Threadsafe Executable' should be set
;╚═════════════════════════════════════════════════════════════════════════════════════════════════
DeclareModule Logger
  
  Enumeration LoggingLevel 1              ; Defines the logging levels supported by the module
    #LogLevel_Start
    #LogLevel_End
    #LogLevel_Debug
    #LogLevel_Info
    #LogLevel_Warn
    #LogLevel_Error
    #LogLevel_Fatal
  EndEnumeration
  
  Declare.b LogStart()                    ; Writes starting line to log file
  Declare.b LogEnd()                      ; Writes starting line to log file
  Declare.b LogInfo(message$)             ; Write info message to the log file
  Declare.b LogWarning(message$)          ; Write warning message to the log file
  Declare.b LogError(message$)            ; Write error message to the log file
  Declare.b LogFatal(message$)            ; Write fatal message to the log file
  Declare.b LogDebug(message$)            ; Write debug message to the log file
  
  Declare SetLoggingLevel(level.i)        ; Sets the logging level
  Declare.i GetLoggingLevel()             ; Gets the logging level
  
  Declare SetLoggingFileName(fileName$)   ; Sets the log file name
  Declare.s GetLoggingFileName()          ; Gets the log file name
  
  Declare.s LoggerError()                 ; Returns the last error message generated by the module
  
EndDeclareModule

Module Logger
  EnableExplicit
  
  #LINE_SPACER = "========================================" ; Used to construct a break in the log file
  
  Global logFileName$ = ""                ; the name of the log file
  Global loggingLevel.i = #LogLevel_Info  ; the current logging level
  Global lastError$ = ""
  
  Global writeLock = CreateMutex()
  
  ; Returns a string representation for the message type
  Procedure.s GetMessageType(level.i)
    Select level
      Case #LogLevel_Info
        ProcedureReturn "INFO "
      Case #LogLevel_Warn
        ProcedureReturn "WARN "
      Case #LogLevel_Error
        ProcedureReturn "ERROR "
      Case #LogLevel_Fatal
        ProcedureReturn "FATAL"
      Case #LogLevel_Debug
        ProcedureReturn "DEBUG"
      Default
        ProcedureReturn "XXXXX"
    EndSelect
  EndProcedure
  
  ; Returns the title for the log file line breaks
  Procedure.s GetStartEnd(level.i)
    If level = #LogLevel_Start
      ProcedureReturn "START"
    Else
      ProcedureReturn "END "
    EndIf
  EndProcedure
  
  ; Returns the time stamp string for the message
  Procedure.s GetTimeStamp()
    ProcedureReturn FormatDate("%yyyy-%mm-%dd %hh:%ii:%ss", Date())
  EndProcedure
  
  Macro FileExists(File) ; Checks if a file exists or not
    (Bool(FileSize(File) <> -1))
  EndMacro
  
  ; Constructs the message to be written to the log file, which
  ; is then delegated to the SysUtils unit.
  Procedure.b WriteMessage(level.i, message$ = "") 
    Protected line$ = ""
    Protected logfile$ = ""
    Protected hFile.i
    
    If (level = #LogLevel_Start) Or (level = #LogLevel_End)
      line$ = GetTimeStamp() + " | " + #LINE_SPACER + " " + GetStartEnd(level) + " " + #LINE_SPACER
    ElseIf (level >= loggingLevel)
      line$ = GetTimeStamp() + " | " + GetMessageType(level) + " | " + message$
    EndIf
    
    If line$ <> "" 
      If logFileName$ = ""
        lastError$ = "Log file name missing!"
        ProcedureReturn #False
      EndIf
            
      If FileExists(logFileName$)
        hFile = OpenFile(#PB_Any, logFileName$, #PB_File_NoBuffering | #PB_File_Append | #PB_UTF8)
      Else
        hFile = CreateFile(#PB_Any, logFileName$, #PB_File_NoBuffering | #PB_UTF8)
      EndIf
      
      If Not IsFile(hFile)
        lastError$ = "Failed to correctly open the log file (" + logFileName$ + ")"
        ProcedureReturn #False
      EndIf
      
      LockMutex(writeLock)
      
      If Not WriteStringN(hFile, line$, #PB_UTF8) 
        lastError$ = "Failed to write log entry to file (" + logFileName$ + ")"
        UnlockMutex(writeLock)
        ProcedureReturn #False
      EndIf
      
      UnlockMutex(writeLock)
      CloseFile(hFile)
    EndIf
    
    ProcedureReturn #True
  EndProcedure
  
  ;┌───────────────────────────────────────────────────────────────────────────────────────────────
  ;│     Public     
  ;└───────────────────────────────────────────────────────────────────────────────────────────────
  
  ; Logs the start line break
  Procedure.b LogStart()
    ProcedureReturn WriteMessage(#LogLevel_Start)
  EndProcedure
  
  ; Logs the end line break
  Procedure.b LogEnd()
    ProcedureReturn WriteMessage(#LogLevel_End)
  EndProcedure
  
  ; Logs the info message
  Procedure.b LogInfo(message$)
    ProcedureReturn WriteMessage(#LogLevel_Info, message$)
  EndProcedure
  
  ; Logs the warning message
  Procedure.b LogWarning(message$)
    ProcedureReturn WriteMessage(#LogLevel_Warn, message$)
  EndProcedure
  
  ; Logs the error message
  Procedure.b LogError(message$)
    ProcedureReturn WriteMessage(#LogLevel_Error, message$)
  EndProcedure
  
  ; Logs the fatal message  
  Procedure.b LogFatal(message$)
    ProcedureReturn WriteMessage(#LogLevel_Fatal, message$)
  EndProcedure
  
  ; Logs the debug message
  Procedure.b LogDebug(message$)
    ProcedureReturn WriteMessage(#LogLevel_Debug, message$)
  EndProcedure
  
  ; Sets the logging level
  Procedure SetLoggingLevel(level.i)
    loggingLevel = level
  EndProcedure
  
  ; Returns the logging level
  Procedure.i GetLoggingLevel()
    ProcedureReturn loggingLevel
  EndProcedure
  
  ; Sets the name of the log file
  Procedure SetLoggingFileName(fileName$)
    logFileName$ = fileName$
  EndProcedure
  
  ; Returns the name of the log file
  Procedure.s GetLoggingFileName()
    ProcedureReturn logFileName$
  EndProcedure
  
  ; Returns the last error message generated by the module
  Procedure.s LoggerError()  
    ProcedureReturn lastError$
  EndProcedure
  
EndModule
; IDE Options = PureBasic 6.21 - C Backend (MacOS X - arm64)
; ExecutableFormat = Console
; CursorPosition = 95
; FirstLine = 95
; Folding = ----
; EnableXP
; DPIAware