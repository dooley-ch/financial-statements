;╔═════════════════════════════════════════════════════════════════════════════════════════════════
;║     main_panel.pbi                                                                           
;╠═════════════════════════════════════════════════════════════════════════════════════════════════
;║     Created: 10-08-2025 
;║
;║     Copyright (c) 2025 James Dooley <james@dooley.ch>
;║
;║     History:
;║     10-08-2025: Initial version
;╚═════════════════════════════════════════════════════════════════════════════════════════════════
DeclareModule MainPanelUI
  
  Declare.i CreateMainPanel(hWindowId.i) ; Creates the main panel
  
  Declare.s MainPanelUIError() ; Returns last error generated by the library

EndDeclareModule

Module MainPanelUI
  EnableExplicit
  
  UseModule Consts
  UseModule SplashPanelUI
  UseModule DownloadPanelUI
  UseModule ImportPanelUI
  
  Define lastError$ = ""
  Define.i hMainWindowId, hMainPanelId
  Define.i hCurrentPanel, hSplashPanel, hDownloadPanel, hImportPanel
  
  Procedure OnResizePanel()
    Shared hMainPanelId, hCurrentPanel
    Protected panelWidth.i, panelHeight.i
    
    panelWidth = GadgetWidth(hMainPanelId, #PB_Gadget_ActualSize)
    panelHeight = GadgetHeight(hMainPanelId, #PB_Gadget_ActualSize)
    
    ResizeGadget(hCurrentPanel, 0, 0, panelWidth, panelHeight)
  EndProcedure
  
  ;┌───────────────────────────────────────────────────────────────────────────────────────────────
  ;│     Public     
  ;└───────────────────────────────────────────────────────────────────────────────────────────────

  ; Returns last error generated by the library
  Procedure.s MainPanelUIError()
    Shared lastError$
    ProcedureReturn lastError$
  EndProcedure
  
  ; Creates the main panel 
  ;
  ; Params
  ; wndId - The main window id
  ;
  ; Returns: The id of the new panel
  ;
  Procedure.i CreateMainPanel(hWindowId.i)
    Shared hMainWindowId, hMainPanelId, hSplashPanel, hDownloadPanel, hImportPanel, hCurrentPanel, lastError$
    
    lastError$ = #Empty$
    
    If IsWindow(hWindowId)
      hMainWindowId = hWindowId
      
      hMainPanelId = ContainerGadget(#PB_Any, 300, 300, 300, 300, #PB_Container_BorderLess)
      If IsGadget(hMainPanelId)
          hSplashPanel = CreateSplashPanel(hMainWindowId)
          hDownloadPanel = CreateDownloadPanel(hMainWindowId)
          hImportPanel = CreateImportPanel(hMainWindowId)
        CloseGadgetList()
        
        HideGadget(hSplashPanel, #True)
        HideGadget(hDownloadPanel, #True)
        
        hCurrentPanel = hImportPanel
        
        SetGadgetColor(hMainPanelId, #PB_Gadget_BackColor, MAIN_PANEL_Background)
        
        BindGadgetEvent(hMainPanelId, @OnResizePanel(), #PB_EventType_Resize)
        
        ProcedureReturn hMainPanelId
      EndIf
      
      lastError$ = "Failed to create main panel, invalid ID returned"
      ProcedureReturn 0   
    EndIf
    
    lastError$ = "Invalid window ID passed to CreateMainPanel function"
    ProcedureReturn 0    
  EndProcedure
    
EndModule
; IDE Options = PureBasic 6.21 - C Backend (MacOS X - arm64)
; ExecutableFormat = Console
; CursorPosition = 74
; FirstLine = 46
; Folding = -
; EnableXP
; DPIAware