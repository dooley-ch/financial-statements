;╔═════════════════════════════════════════════════════════════════════════════════════════════════
;║     message_boxes_ui.pbi                                                                           
;╠═════════════════════════════════════════════════════════════════════════════════════════════════
;║     Created: 16-08-2025 
;║
;║     Copyright (c) 2025 James Dooley <james@dooley.ch>
;║
;║     History:
;║     16-08-2025: Initial version
;╚═════════════════════════════════════════════════════════════════════════════════════════════════

DeclareModule MessageBoxesUI
  
  Declare ShowWarningMessage(message$, hWindow.i)     ; Displays a warning message
  Declare ShowErrorMessage(message$, hWindow.i)       ; Displays an error message
  Declare ShowInfoMessage(message$, hWindow.i)        ; Displays an information message
  Declare.b ConfirmAction(message$, hWindow.i)        ; Ask the user to confirm an action
  
  Declare.s LastError() ; Returns last error generated by the module

EndDeclareModule

Module MessageBoxesUI
  EnableExplicit
  
  CompilerIf Not Defined(App_Title, #PB_Constant)
    CompilerError "#App_Title constant must be defined in order to use the MessageBoxesUI module"
  CompilerEndIf
  
  Define lastErrorMessage$ = #Empty$ ; Holds the last error generated by the module
  
  Procedure ResetLastErrorMEssage()
    Shared lastErrorMessage$
    
    lastErrorMessage$ = #Empty$
  EndProcedure
  
  ;┌───────────────────────────────────────────────────────────────────────────────────────────────
  ;│     Public     
  ;└───────────────────────────────────────────────────────────────────────────────────────────────

  ; Returns last error generated by the module
  Procedure.s LastError()
    Shared lastErrorMessage$
  
    ProcedureReturn lastErrorMessage$
  EndProcedure
  
  ; Displays a warning message
  ;
  ; Params
  ;   message$ - The message to display
  ;   hWindow - The application 
  ;
  Procedure ShowWarningMessage(message$, hWindow.i)
    MessageRequester(#App_Title, message$, #PB_MessageRequester_Warning | #PB_MessageRequester_Ok, hWindow)
  EndProcedure
  
  ; Displays an error message
  ;
  ; Params
  ;   message$ - The message to display
  ;   hWindow - The application 
  ;  
  Procedure ShowErrorMessage(message$, hWindow.i)
    MessageRequester(#App_Title, message$, #PB_MessageRequester_Error | #PB_MessageRequester_Ok, hWindow)
  EndProcedure
  
  ; Displays an information message
  ;
  ; Params
  ;   message$ - The message to display
  ;   hWindow - The application 
  ;   
  Procedure ShowInfoMessage(message$, hWindow.i)  
    MessageRequester(#App_Title, message$, #PB_MessageRequester_Info | #PB_MessageRequester_Ok, hWindow)
  EndProcedure
  
  ; Ask the user to confirm an action
  ;
  ; Params
  ;   message$ - The message to display
  ;   hWindow - The application 
  ; 
  ; Returns
  ;   True if the user confirms the action, otherwise false
  ;
  Procedure.b ConfirmAction(message$, hWindow.i) 
    ProcedureReturn Bool(MessageRequester(#App_Title, message$, 
                                          #PB_MessageRequester_Info | #PB_MessageRequester_YesNo, 
                                          hWindow) = #PB_MessageRequester_Yes)
  EndProcedure
EndModule

;┌───────────────────────────────────────────────────────────────────────────────────────────────
;│     Example     
;└───────────────────────────────────────────────────────────────────────────────────────────────
CompilerIf (#PB_Compiler_IsMainFile)
  DisableExplicit
  
  Define hWindow.i, hButton.i
  
  Procedure OnWarningButtonClick()
    Shared hWindow
    
    MessageBoxesUI::ShowWarningMessage("This is a warning message", hWindow)
  EndProcedure
  
  Procedure OnErrorButtonClick()
    Shared hWindow
    
    MessageBoxesUI::ShowErrorMessage("This is an error message", hWindow)
  EndProcedure
  
  Procedure OnInfoButtonClick()
    Shared hWindow
    
    MessageBoxesUI::ShowInfoMessage("This is an information message", hWindow)
  EndProcedure
  
  Procedure OnConfirmActionButtonClick()
    Shared hWindow
    
    If MessageBoxesUI::ConfirmAction("Are you sure you want to do this?", hWindow)
      MessageBoxesUI::ShowInfoMessage("You said YES", hWindow)
    Else
      MessageBoxesUI::ShowInfoMessage("You said NO", hWindow)
    EndIf
  EndProcedure
  
  hWindow = OpenWindow(#PB_Any, #PB_Ignore, #PB_Ignore, 250, 200, #App_Title,
                       #PB_Window_TitleBar | #PB_Window_ScreenCentered | #PB_Window_SystemMenu)
  If IsWindow(hWindow)
    hButton = ButtonGadget(#PB_Any, 20, 20, 200, 25, "Warning Message")
    BindGadgetEvent(hButton, @OnWarningButtonClick(), #PB_All)
    
    hButton = ButtonGadget(#PB_Any, 20, 50, 200, 25, "Error Message")
    BindGadgetEvent(hButton, @OnErrorButtonClick(), #PB_All)
    
    hButton = ButtonGadget(#PB_Any, 20, 80, 200, 25, "Information Message")
    BindGadgetEvent(hButton, @OnInfoButtonClick(), #PB_All)
    
    hButton = ButtonGadget(#PB_Any, 20, 110, 200, 25, "Confirm Action Yes/No")
    BindGadgetEvent(hButton, @OnConfirmActionButtonClick(), #PB_All)

    Repeat
      Event = WaitWindowEvent()

      If Event = #PB_Event_CloseWindow  ; If the user has pressed on the close button
        Quit = 1
      EndIf
    Until Quit = 1
  EndIf
  
  End
CompilerEndIf
; IDE Options = PureBasic 6.21 - C Backend (MacOS X - arm64)
; ExecutableFormat = Console
; CursorPosition = 126
; FirstLine = 119
; Folding = ---
; EnableXP
; DPIAware
; Constant = #App_Title="MessageBox Demos"